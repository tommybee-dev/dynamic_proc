/* --------------------------------------------------------------------------------
파일 이름 : dblib.pc
개발 일자 : 2002-10-28
작성자 : 류명환
-------------------------------------------------------------------------------- */

/*
 * dblib.pc
 * Dynamic SQL을 수행할 수 있도록 만들어진 일종의 라리브러리 파일
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>

#include "dblib.h"

#define MAXSTR 20
#define MAXLEN 1024

exec sql include sqlca;



/* --------------------------------------------------------------------------
                         변   수       선   언   부
-------------------------------------------------------------------------- */

exec sql begin declare section;
	/*
	* DB에 접속하기 위한 변수들
	*/
	char  username [32];
	char  password [32];
	char  database [32];
	char tnsstring[100];
	
	/*
	* SQL 문장을 저장하기 위한 변수
	*/
	char  stmt [1024 * 10];
	
	/*
	* Select 문장을 실행할때 쓰이는 변수들
	*/
	int    input_cnt;
	int    output_cnt;
	char  name [32];
	int    value;
	int    type;
	int    length;
	char  param_in [MAXSTR][MAXLEN];
	char  data [MAXLEN];
	short  indi;

exec sql end   declare section;


void init_array(char ary[][MAXLEN]) {
    int i, j;
    for (i = 0; i < MAXSTR; i++) {
        for (j = 0; j < MAXLEN; j++) {
                ary[i][j] = '0';
        }
    }
}

/* --------------------------------------------------------------------------
                        함   수       구   현   부
-------------------------------------------------------------------------- */

/*
 * 오라클 작업도중 에러발생시 에러메시지를 리턴한다.
 */
char *ora_sqlerrm (void)
{
  return (sqlca.sqlerrm.sqlerrmc);
}


/*
 * 오라클 작업도중 에러발생시 에러코드를 리턴한다.
 */
int ora_sqlcode (void)
{
  return (sqlca.sqlcode);
}


/*
 * 데이타베이스와 접속하는 함수.
 * user에 접속할 사용자 이름이, pass에 해당 사용자의 암호가 들어가고
 * db에는 접속할 데이타베이스의 Connect String이 들어간다.
 * Local DB인 경우 Connect String는 필요없다.
 * 만약 db의 값이 NULL이라면 로컬 데이타베이스에 접속한다.
 * 성공하면 SUCCESS를 실패하면 FAILURE를 반환한다.
 */
int ora_connect (const char *user, const char *pass, const char *db)
{
  /*
   * 사용자이름과 패스워드가 들어어오지 않았다면 에러로 처리한다.
   */
  if (user == NULL || pass == NULL) return (FAILURE);

  /*
   * 사용자이름과 패스워드를 복사하고
   * 원격지 DB인 경우 커넥트스트링도 복사한다.
   */
  strcpy (username, user);
  strcpy (password, pass);
  if (db != NULL)
  {
    strcpy (database, db);
  }

  /*
   * 원격지 DB인지 로컬 DB인지 구분하여 접속한다.
   */
  if (db != NULL)
  {
    exec sql
      connect :username identified by :password using :database;
  }
  else
  {
    exec sql
      connect :username identified by :password;
  }

  /*
   * sqlcode를 검사하여 성공여부를 리턴한다.
   */
  return ((sqlca.sqlcode == 0) ? SUCCESS : FAILURE);
}

int ora_connect_tns (const char *tns_str)
{
  if (tns_str == NULL) return (FAILURE);

  /*
   * 사용자이름과 패스워드를 복사하고
   * 원격지 DB인 경우 커넥트스트링도 복사한다.
   */
  strcpy (tnsstring, tns_str);
  
  exec sql
  	connect :tnsstring;

  /*
   * sqlcode를 검사하여 성공여부를 리턴한다.
   */
  return ((sqlca.sqlcode == 0) ? SUCCESS : FAILURE);
}


/*
 * 데이타베이스와 접속을 종료하는 함수.
 * mode가 COMMIT이라면 현재까지 데이타베이스의 변경사항을 커밋하고
 * mode가 ROLLBACK이라면 현재까지 데이타베이스의 변경사항을 롤백한다.
 * 성공하면 SUCCESS를 실패하면 FAILURE를 반환한다.
 */
int ora_disconnect (int mode)
{
  /*
   * 모드를 검사하여 현재 트랜젝션을 커밋 또는 롤백하여 접속을 종료한다.
   */
  if (mode == COMMIT)
  {
    exec sql
      commit work release;
  }
  else
  {
    exec sql
      rollback work release;
  }

  /*
   * sqlcode를 검사하여 성공여부를 접속한다.
   */
  return ((sqlca.sqlcode == 0) ? SUCCESS : FAILURE);
}


/*
 * DB의 변경사항을 COMMIT 하는 함수
 */
int ora_commit (void)
{
  /*
   * 트랜젝션을 커밋힌다.
   */
  exec sql
    commit work;

  /*
   * sqlcode를 검사하여 성공여부를 접속한다.
   */
  return ((sqlca.sqlcode == 0) ? SUCCESS : FAILURE);
}


/*
 * DB의 변경사항을 ROLLBACK 하는 함수
 */
int ora_rollback (void)
{
  /*
   * 트랜젝션을 롤백한다.
   */
  exec sql
    rollback work;

  /*
   * sqlcode를 검사하여 성공여부를 접속한다.
   */
  return ((sqlca.sqlcode == 0) ? SUCCESS : FAILURE);
}


/*
 * SQL문장을 설정하는 함수
 * 파라메타로 실행할 SQL문장을 받는다.
 * 성공하면 SUCCESS를 실패하면 FAILURE를 반환한다.
 */
int ora_setstmt (char *str)
{
int  i = 0;

  /*
   * 빈 문장이 들어올 경우 실패로 처리한다.
   */
  if (strlen (str) == 0)
  {
    return (FAILURE);
  }

  /*
   * 문장의 앞부분에 공백문자나 탭문자가 들어온 경우 이부분을 스킵하도록 한다.
   */
  for (i = 0; i < strlen (str); i ++)
  {
    if (!isspace (str [i]))
    {
      break;
    }
  }

  /*
   * 공백문자나 탭문자를 제외한 뒷부분을 복사한다.
   */
  strcpy (stmt, str + i);

  /*
   * 문장의 뒷부분에 개행문자, 공백, 콜론등의 문자들이 있으면 제거한다.
   */
  for (i = strlen (str) - 1; i >= 0; i --)
  {
    if (stmt [i] == '\n') stmt [i] = '\0';
    else if (stmt [i] == '\r') stmt [i] = '\0';
    else if (stmt [i] == '\t') stmt [i] = '\0';
    else if (stmt [i] == ' ' ) stmt [i] = '\0';
    else if (stmt [i] == ';' ) stmt [i] = '\0';
    else break;
  }

  return (SUCCESS);
}


/*
 * 현재 설정된 SQL문장을 얻어오는 함수
 */
char *ora_getstmt (char *buf)
{
  strcpy (buf, stmt);
  
  return buf;
}


/*
 * Select문장이 아닌 모든 문장을 (DML, DDL, DCL) 실행하는 함수
 * DML  (INSERT, UPDATE, DELETE) 문장을 실행하는 함수
 * DDL  (CREATE, ALTER, DROP, RENAME, TRUNCATE) 문장을 실행하는 함수
 * DCL  (GRANT, REVOKE) 문장을 실행하는 함수
 * 성공하면 SUCCESS를, 실패하면 FAILURE를 반환한다.
 */

int ora_execute (int *ncols)
{
	/*printf("Statement [%s] \n", stmt);*/
	/*
	* 문장의 첫 구분을 검사하여 DML, DDL, DCL인가 검사한다.
	*/
	if (!strncmp (stmt, "INSERT",   6) ||
		!strncmp (stmt, "Insert",   6) ||
		!strncmp (stmt, "insert",   6) ||
		!strncmp (stmt, "UPDATE",   6) ||
		!strncmp (stmt, "Update",   6) ||
		!strncmp (stmt, "update",   6) ||
		!strncmp (stmt, "DELETE",   6) ||
		!strncmp (stmt, "Delete",   6) ||
		!strncmp (stmt, "delete",   6) ||
		!strncmp (stmt, "CREATE",   6) ||
		!strncmp (stmt, "Create",   6) ||
		!strncmp (stmt, "create",   6) ||
		!strncmp (stmt, "ALTER",    5) ||
		!strncmp (stmt, "Alter",    5) ||
		!strncmp (stmt, "alter",    5) ||
		!strncmp (stmt, "DROP",     4) ||
		!strncmp (stmt, "Drop",     4) ||
		!strncmp (stmt, "drop",     4) ||
		!strncmp (stmt, "RENAME",   6) ||
		!strncmp (stmt, "Rename",   6) ||
		!strncmp (stmt, "rename",   6) ||
		!strncmp (stmt, "TRUNCATE", 8) ||
		!strncmp (stmt, "Truncate", 8) ||
		!strncmp (stmt, "truncate", 8) ||
		!strncmp (stmt, "REVOKE",   6) ||
		!strncmp (stmt, "Revoke",   6) ||
		!strncmp (stmt, "revoke",   6) ||
		!strncmp (stmt, "GRANT",    5) ||
		!strncmp (stmt, "Grant",    5) ||
		!strncmp (stmt, "grant",    5))
	{
		
		/*
		 * 문장을 실행한다.
		 * EXEC SQL PREPARE SP FROM :qry;
		 * EXEC SQL EXECUTE SP USING :V_ID;
		 * exec sql
		 * 	execute immediate :stmt;
		 * exec sql for :input_cnt
		 *	execute stmt using descriptor binda;
		 * printf("a Statement!!! [%d][%d]\n",  input_cnt, sqlca.sqlcode);
		 * printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());
		*/
		
		*ncols = sqlca.sqlerrd[2];
		
		printf("%d rows inserted.\n\n", sqlca.sqlerrd[2]);
    	exec sql commit release;
		
		/*
		 * sqlcode를 검사하여 결과를 리턴한다.
		 */
		return ((sqlca.sqlcode == 0) ? SUCCESS : FAILURE);
	}
	else
	{
		printf("Not a Statement \n");
		
		return FAILURE;
	}
}


void init_descriptor ()
{
	exec sql
		whenever sqlerror goto ERROR;
		
	exec sql
		allocate descriptor 'gin' ;
	
	exec sql
		prepare gsql from :stmt;
		
ERROR:
	printf ("Error(init_descriptor) : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());
	
	exec sql
		whenever sqlerror continue;
	exec sql
		deallocate descriptor 'gin';
	
	return (FAILURE);
}

void open_curs()
{
	exec sql 
		declare gcurs cursor for gsql;
}

void close_curs()
{
	exec sql
		close gcurs;
}

void close_descriptor()
{
	exec sql
		deallocate descriptor 'gin';
}


int ora_global_bind_params (char *params, ...)
{
	int i;
	int idx;
	char *param;
	va_list marker;
	
	exec sql
		whenever sqlerror goto ERROR;
	
	exec sql
		describe input gsql using descriptor 'gin';
	
	exec sql
		get descriptor global 'gin' :input_cnt = count;
	
	printf("..............input_cnt %d \n", input_cnt);
	
	i = 0;
	idx = 0;
    va_start( marker, params );
	
	init_array(param_in);
	
    for( i = 0; i < input_cnt ; i++ )
    {
    	param = va_arg(marker, char*);
    	
    	memcpy(param_in[i], param, sizeof(param_in[i]));
    	param_in[i][strlen (param)] = '\0';
    }

    va_end( marker );
	
	/**/
	
	i = 0;
	
	
	for (value = 1; value <= input_cnt; value ++)
	{
		exec sql
			get descriptor global 'gin' value :value
			:name = name, :type = type, :length = length;
    	
    	memcpy(data, param_in[i], sizeof(data));
    	
    	idx = strlen (data);
    	
		/*
		 * 모든 bind 변수의 값은 문자열로 받아들이므로 type을 12로 한다.
		 * 실제 Input Bind 변수의 길이, 타입, 값을 지정해 준다.
		 */
		type = VARCHAR2;
		length = idx == 0 ? 1:idx ;
		
		/*printf ("type:%d length:%d d:%s \n", type, length, data);*/
		
		exec sql
			set descriptor 'gin' 
				value :value type = :type, 
							 length = :length, 
							 data = :data;
		
		i++;
		if(i == input_cnt) break;
  	}
	
	
	exec sql
		open gcurs using descriptor 'gin';
	
	exec sql
		whenever sqlerror continue;

	return (SUCCESS);

	ERROR:
  		printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());
	
	exec sql
		close gcurs;
	
	exec sql
		whenever sqlerror continue;
	exec sql
		deallocate descriptor 'gin';
	
	return (FAILURE);
}

/*http://docs.oracle.com/cd/B19306_01/appdev.102/b14407/pc_15ody.htm#i7496*/
int ora_bind_u_params (char *params, ...)
{

	int i;
	int idx;
	char *param;
	va_list marker;
	
	exec sql
		whenever sqlerror goto ERROR;

	exec sql
		allocate descriptor local 'in' ;
	
	exec sql
		prepare sql from :stmt;

	exec sql
		describe input sql using descriptor local 'in';

	exec sql
		get descriptor local 'in' :input_cnt = count;

	i = 0;
	idx = 0;
    va_start( marker, params );
	
	init_array(param_in);
	
    for( i = 0; i < input_cnt ; i++ )
    {
    	param = va_arg(marker, char*);
    	
    	memcpy(param_in[i], param, sizeof(param_in[i]));
    	param_in[i][strlen (param)] = '\0';
    }

    va_end( marker );
	
	/*printf("..............input_cnt %d \n", input_cnt);*/
	
	i = 0;
	
	
	for (value = 1; value <= input_cnt; value ++)
	{
		exec sql
			get descriptor local 'in' value :value
			:name = name, :type = type, :length = length;
    	
    	memcpy(data, param_in[i], sizeof(data));
    	
    	idx = strlen (data);
    	
		/*
		 * 모든 bind 변수의 값은 문자열로 받아들이므로 type을 12로 한다.
		 * 실제 Input Bind 변수의 길이, 타입, 값을 지정해 준다.
		 */
		type = VARCHAR2;
		length = idx == 0 ? 1:idx ;
		
		/*printf ("type:%d length:%d d:%s \n", type, length, data);*/
		
		exec sql
			set descriptor local 'in' value :value
			type = :type, length = :length, data = :data;
		
		i++;
		if(i == input_cnt) break;
  	}
	exec sql
		declare icurs cursor for sql;
	exec sql
		open icurs using descriptor local 'in';
	
	exec sql
		whenever sqlerror continue;

	return (SUCCESS);

	ERROR:
  		printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());
	exec sql
		close icurs;
	exec sql
		whenever sqlerror continue;
	exec sql
		deallocate descriptor local 'in';
	
	return (FAILURE);
}

int ora_bind_params (int *ncols, char *params, ...)
{

	int i;
	char *param;
	va_list marker;
	int idx;
	
	exec sql
		whenever sqlerror goto ERROR;
 
	exec sql
		allocate descriptor local 'in' ;
	exec sql
		allocate descriptor local 'out';

	exec sql
		prepare sql from :stmt;

	exec sql
		describe input sql using descriptor local 'in';

	exec sql
		get descriptor local 'in' :input_cnt = count;

    va_start( marker, params );
	
	init_array(param_in);
	
    for( i = 0; i < input_cnt ; i++ )
    {
    	param = va_arg(marker, char*);
    	
    	memcpy(param_in[i], param, sizeof(param_in[i]));
    	param_in[i][strlen (param)] = '\0';
    }

    va_end( marker );
	
	printf("..............input_cnt %d \n", input_cnt);
	
	i = 0;
	idx = 0;
	
	for (value = 1; value <= input_cnt; value ++)
	{
		exec sql
			get descriptor local 'in' value :value
			:name = name, :type = type, :length = length;
    	
    	memcpy(data, param_in[i], sizeof(data));
    	
    	idx = strlen (data);
    	
		/*
		 * 모든 bind 변수의 값은 문자열로 받아들이므로 type을 12로 한다.
		 * 실제 Input Bind 변수의 길이, 타입, 값을 지정해 준다.
		 */
		type = VARCHAR2;
		length = idx == 0 ? 1:idx ;
		
		/*printf ("type:%d length:%d d:%s \n", type, length, data);*/
		
		exec sql
			set descriptor local 'in' value :value
			type = :type, length = :length, data = :data;
		
		i++;
		if(i == input_cnt) break;
  	}

	exec sql
		declare bcurs cursor for sql;
	exec sql
		open bcurs using descriptor local 'in';

	exec sql
		describe output sql using descriptor local 'out';

	exec sql
		get descriptor local 'out' :output_cnt = count;

	*ncols = output_cnt;

	exec sql
		whenever sqlerror continue;

	return (SUCCESS);

	ERROR:
  		printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());

	exec sql
		whenever sqlerror continue;
	exec sql
		close bcurs;
	exec sql
		deallocate descriptor local 'in';
	exec sql
		deallocate descriptor local 'out';
	
	return (FAILURE);
}


int ora_bind_params2 (int *ncols, char *params, ...)
{

	int i = 0;
	char *param;
	va_list marker;
	
	exec sql
		whenever sqlerror goto ERROR;

 
	exec sql
		allocate descriptor local 'in' ;
	exec sql
		allocate descriptor local 'out';

	exec sql
		prepare sql from :stmt;

	exec sql
		describe input sql using descriptor local 'in';

	exec sql
		get descriptor local 'in' :input_cnt = count;
	
 	
	
    va_start( marker, params );
	
	printf("param......... \n");
	
	
	printf("..............input_cnt %d \n", input_cnt);
	
	
    for( i = 0; i < input_cnt ; i++ )
    {
    	param = va_arg(marker, char*);
        strcpy(param_in[i], param);
        
        printf("param[%s] \n", param);
    }

    va_end( marker );
	

	return (SUCCESS);
	
	ERROR:
  		printf ("Error : %d - %s \n", ora_sqlcode (), ora_sqlerrm ());

	exec sql
		whenever sqlerror continue;
	exec sql
		close bcurs;
	exec sql
		deallocate descriptor local 'in';
	exec sql
		deallocate descriptor local 'out';
	
	return (FAILURE);
	
}



/*
 * Bind 변수를 정의하고 커서를 선언하고 열어 칼럼의 개수를 전달한다.
 * 성공하면 SUCCESS를 실패하면 FAILURE를 반환한다.
 */
int ora_select_open (int *ncols)
{
  /*
   * sqlca.sqlcode 를 검사해도 좋으나 exec sql문장이 너무 많은 경우
   * 일일이 sqlcode를 검사하는 것은 코드를 읽기가 지저분 하므로
   * whenever구문을 사용해서 SQL 에러가 발생하면 ERROR로 가도록 한다.
   */
  exec sql
    whenever sqlerror goto ERROR;

  /*
   * input, output을 위한 descriptor를 생성한다.
   */
  exec sql
    allocate descriptor local 'in' ;
  exec sql
    allocate descriptor local 'out';

  /*
   * SQL 문장을 파싱하기 위한 ID를 얻어온다.
   */
  exec sql
    prepare sql from :stmt;

  /*
   * Input Bind 변수들을 위한 descriptor를 지정한다.
   */
  exec sql
    describe input sql using descriptor local 'in';

  /*
   * Input Bind 변수의 개수를 descriptor에서 얻어온다
   */
  exec sql
    get descriptor local 'in' :input_cnt = count;

  /*
   * ANSI SQL Datatypes
   *
   * Character         : 1
   * Character Varying : 12
   * Date              : 9
   * Decimal           : 3
   * Double Precision  : 8
   * Float             : 6
   * Integer           : 4
   * Numeric           : 2
   * Real              : 7
   * SmallInt          : 5
   */
	
	
	printf("..............input_cnt %d \n", input_cnt);
	
  /*
   * SQL문장의 Input Bind 변수의 개수만큼 Type, Length, 실제 Data를 지정한다.
   * value는 bind 변수의 위치순서, Type은 데이타 타입, Length는 변수의 길이다.
   */
  for (value = 1; value <= input_cnt; value ++)
  {
    /*
     * Input Bind 변수의 이름과 타입, 길이를 얻어온다.
     */
    exec sql
      get descriptor local 'in' value :value
      :name = name, :type = type, :length = length;
    
    /*
     * Input Bind 변수의 값을 받아들인다.
     * 대부분의 Dynamic SQL에서는 Input Bind 변수를
     * 거의 쓰지 않으므로 실제로는 잘 안쓰인다.
     */
    /*printf ("Enter Value for Input Variable %s : ", name);*/
    fgets (data, sizeof (data), stdin);
    
    printf ("Enter Value for Input Variable %s : %s/%d", name, data, strlen (data));
    
    /*
     * CR, LF 코드를 제거한다.
     */
    data [ strlen (data) -1 ] = '\0';

    /*
     * 모든 bind 변수의 값은 문자열로 받아들이므로 type을 12로 한다.
     * 실제 Input Bind 변수의 길이, 타입, 값을 지정해 준다.
     */
    type = 12;
    length = strlen (data) + 1;
    exec sql
      set descriptor local 'in' value :value
      type = :type, length = :length, data = :data;
  }

  /*
   * 커서를 선언하고 연다
   */
  exec sql
    declare curs cursor for sql;
  exec sql
    open curs using descriptor local 'in';

  /*
   * Output Bind 변수들을 describe하기 위한 descriptor를 지정한다.
   */
  exec sql
    describe output sql using descriptor local 'out';

  /*
   * Dynamic SQL이므로 Select List의 칼럼 개수를 알지 못한다. 
   * 그러므로 'out' descriptor를 이용하여 Select List의 칼럼의
   * 개수를 얻어와서 함수인자 ncols에 전달한다.
   */
  exec sql
    get descriptor local 'out' :output_cnt = count;

  *ncols = output_cnt;

  /*
   * SQL 에러가 발생하였을 경우 계속 진행하도록 한다.
   */
  exec sql
    whenever sqlerror continue;

  return (SUCCESS);

/*
 * 에러가 발생하였을 경우 커서와 데스크립트를 닫는다.
 */
ERROR:
  printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());

  exec sql
    whenever sqlerror continue;
  exec sql
    close curs;
  exec sql
    deallocate descriptor local 'in';
  exec sql
    deallocate descriptor local 'out';

  return (FAILURE);
}


/*
 * 커서에서 지정한 칼럼의 이름을 얻어온다.
 * 성공하면 SUCCESS를 실패하면 FAILURE를 반환한다.
 */
int ora_select_fetch_name (char *pdata, int pos)
{
  /*
   * sqlca.sqlcode 를 검사해도 좋으나 exec sql문장이 너무 많은 경우
   * 일일이 sqlcode를 검사하는 것은 코드를 읽기가 지저분 하므로
   * whenever구문을 사용해서 SQL 에러가 발생하면 ERROR로 가도록 한다.
   */
  exec sql
    whenever sqlerror goto ERROR;
  
  /*
   * descriptor에서 칼럼의 이름을 얻어온다.
   * value는 칼럼의 위치이다.
   */

  /*
   * descriptor로부터 지정 위치의 칼럼 이름을 얻어온다.
   */
  value = pos;
  exec sql
    get descriptor local 'out' value :value :name = name;

  /*
   * 칼럼 이름을 함수 인자 pdata에 넣어준다.
   */
  strcpy (pdata, name);

  /*
   * SQL 에러가 발생하였을 경우 계속 진행하도록 한다.
   */
  exec sql
    whenever sqlerror continue;

  return (SUCCESS);

/*
 * 에러가 발생하였을 경우 커서와 데스크립트를 닫는다.
 */
ERROR:
  printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());

  exec sql
    whenever sqlerror continue;
  exec sql
    close curs;
  exec sql
    deallocate descriptor local 'in';
  exec sql
    deallocate descriptor local 'out';

  return (FAILURE);
}


/*
 * 커서에서 하나의 row를 패치하기 전에 먼저 각 칼럼의
 * 데이타 타입을 정의 해주어야만 한다.
 * 성공하면 SUCCESS를 실패하면 FAILURE를 반환한다.
 */
int ora_select_set_column (int pos, int type, int length)
{
int value;

  /*
   * sqlca.sqlcode 를 검사해도 좋으나 exec sql문장이 너무 많은 경우
   * 일일이 sqlcode를 검사하는 것은 코드를 읽기가 지저분 하므로
   * whenever구문을 사용해서 SQL 에러가 발생하면 ERROR로 가도록 한다.
   */
  exec sql
    whenever sqlerror goto ERROR;
  
  /*
   * 지정 위치의 칼럼 데이타를 얻어오기 위해서 descriptor에
   * Output Bind 변수의 datatype, length를 설정한다.
   */
  value = pos;
  exec sql
    set descriptor local 'out' value :value
    type = :type, length = :length;

  /*
   * SQL 에러가 발생하였을 경우 계속 진행하도록 한다.
   */
  exec sql
    whenever sqlerror continue;

  return (SUCCESS);

/*
 * 에러가 발생하였을 경우 커서와 데스크립트를 닫는다.
 */
ERROR:
  printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());

  exec sql
    whenever sqlerror continue;
  exec sql
    close curs;
  exec sql
    deallocate descriptor local 'in';
  exec sql
    deallocate descriptor local 'out';

  return (FAILURE);
}


/*
 * 커서에서 하나의 row를 descriptor에 패치해 넣는다.
 * 나중에 descriptor에서 한 칼럼씩 데이타를 얻어온다.
 * 성공하면 SUCCESS를 실패하면 FAILURE를 반환한다.
 */
int ora_select_fetch_row (void)
{
  /*
   * sqlca.sqlcode 를 검사해도 좋으나 exec sql문장이 너무 많은 경우
   * 일일이 sqlcode를 검사하는 것은 코드를 읽기가 지저분 하므로
   * whenever구문을 사용해서 SQL 에러가 발생하면 ERROR로 가도록 한다.
   */
  exec sql
    whenever sqlerror goto ERROR;
  
  /*
   * 커서에서 하나의 row를 패치하여 descriptor로 넣는다.
   */
  exec sql
    fetch curs into descriptor local 'out';

  /*
   * SQL 에러가 발생하였을 경우 계속 진행하도록 한다.
   */
  exec sql
    whenever sqlerror continue;

  return (SUCCESS);

/*
 * 에러가 발생하였을 경우 커서와 데스크립트를 닫는다.
 */
ERROR:
  printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());

  exec sql
    whenever sqlerror continue;
  exec sql
    close curs;
  exec sql
    deallocate descriptor local 'in';
  exec sql
    deallocate descriptor local 'out';

  return (FAILURE);
}


/*
 * 하나의 row를 가지고 있는 descriptor에서 하나의 칼럼 데이타를 패치한다.
 */
int ora_select_fetch_data (char *pdata, int pos)
{
  /*
   * sqlca.sqlcode 를 검사해도 좋으나 exec sql문장이 너무 많은 경우
   * 일일이 sqlcode를 검사하는 것은 코드를 읽기가 지저분 하므로
   * whenever구문을 사용해서 SQL 에러가 발생하면 ERROR로 가도록 한다.
   *  http://psoug.org/oraerror/ORA-00100.htm
   */
  
  exec sql
    whenever sqlerror goto ERROR;
  

  /*
   * descriptor에서 지정된 위치의 칼럼 데이타를 얻어온다.
   */
  value = pos;
  exec sql
    get descriptor local 'out' value :value
    :data = data, :indi = indicator;

  /*
   * SQL 에러가 발생하였을 경우 계속 진행하도록 한다.
   */
  exec sql
    whenever sqlerror continue;

  /*
   * indicator 변수의 값을 조사하여 칼럼 데이타가 NULL이 아니라면
   * 데이타를 복사하고 NULL이 맞다면 "[NULL]" 문자열을 값으로 복사한다.
   */
  strcpy (pdata,  (indi != -1) ? data : "[NULL]");

  return (SUCCESS);

/*
 * 에러가 발생하였을 경우 커서와 데스크립트를 닫는다.
 */
ERROR:
  printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());

  exec sql
    whenever sqlerror continue;
  exec sql
    close curs;
  exec sql
    deallocate descriptor local 'in';
  exec sql
    deallocate descriptor local 'out';

  return (FAILURE);
}


/*
 * 커서로부터 모든 내용을 패치하고 커서와 descriptor를 닫는다.
 */
int ora_select_close (void)
{
  /*
   * sqlca.sqlcode 를 검사해도 좋으나 exec sql문장이 너무 많은 경우
   * 일일이 sqlcode를 검사하는 것은 코드를 읽기가 지저분하므로
   * whenever구문을 사용해서 SQL 에러가 발생하면 ERROR로 가도록 한다.
   */
  exec sql
    whenever sqlerror goto ERROR;

  /*
   * 사용한 커서를 닫는다.
   */
  exec sql
    close curs;

  /*
   * 사용한 input, output descriptor를 제거한다.
   */
  exec sql
    deallocate descriptor local 'in';
  exec sql
    deallocate descriptor local 'out';

  /*
   * SQL 에러가 발생하였을 경우 계속 진행하도록 한다.
   */
  exec sql
    whenever sqlerror continue;

  return (SUCCESS);

/*
 * 에러가 발생하였을 경우 커서와 데스크립트를 닫는다.
 */
ERROR:
  printf ("Error : %d - %s\n", ora_sqlcode (), ora_sqlerrm ());

  exec sql
    whenever sqlerror continue;
  exec sql
    close curs;
  exec sql
    deallocate descriptor local 'in';
  exec sql
    deallocate descriptor local 'out';

  return (FAILURE);
}
